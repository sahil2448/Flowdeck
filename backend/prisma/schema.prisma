generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String?
  email        String        @unique
  passwordHash String
  avatarUrl    String?
  workspaces   Workspace[]   @relation("WorkspaceOwner")
  memberships  Membership[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Workspace {
  id         String       @id @default(cuid())
  name       String
  ownerId    String
  owner      User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  memberships Membership[]
  boards     Board[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Membership {
  id          String     @id @default(cuid())
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  role        String     @default("member") // owner, admin, member, guest
  createdAt   DateTime   @default(now())
}

model Board {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  title       String
  description String?
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  lists       List[]
  archived    Boolean   @default(false)
  position    Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model List {
  id        String   @id @default(cuid())
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  title     String
  position  Float    @default(0)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String   @id @default(cuid())
  list        List     @relation(fields: [listId], references: [id])
  listId      String
  title       String
  description String?
  position    Float    @default(0)
  dueDate     DateTime?
  assigneeId  String?
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
}
